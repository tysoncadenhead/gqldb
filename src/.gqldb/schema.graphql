#THIS IS A GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

  input GQLDBIndex {
    name: String!
    index: String!
    pk: String!
    sk: String!
  }

  directive @model(table: String, indexes: [GQLDBIndex]) on OBJECT
  directive @pk(key: String!) on FIELD_DEFINITION
  directive @sk(key: String!) on FIELD_DEFINITION
  directive @key(key: String!) on FIELD_DEFINITION
  directive @belongsTo(pk: String!, sk: String!) on FIELD_DEFINITION
  directive @hasOne(pk: String!, sk: String!) on FIELD_DEFINITION
  directive @hasMany(pk: String!, sk: String!) on FIELD_DEFINITION
  directive @generated on FIELD_DEFINITION


  type Address @model(table: "mindful-ex-tyson") {
    pk: String! @pk(key: "Address")
    sk: String! @sk(key: "personId:{{personId}}|id:{{id}}")
    id: ID! @generated
    personId: ID!
    street: String!
    city: String!
    state: String!
    zip: String!
    person: Person! @belongsTo(pk: "Person", sk: "id:{{personId}}")
  }

  type Person @model(table: "mindful-ex-tyson") {
    pk: String! @pk(key: "Person")
    sk: String! @sk(key: "id:{{id}}")
    id: ID! @generated
    firstName: String!
    lastName: String!
    age: Int
    addresses: [Address!]! @hasMany(pk: "Address", sk: "personId:{{id}}")
  }



type PaginatedAddress {
    limit: Int!
    lastKey: String
    items: [Address!]!
}

input GetAddressInput {
   id: ID!
   personId: ID!
}

input DeleteAddressInput {
   id: ID!
   personId: ID!
}

input QueryAddressRecordsInput {
   limit: Int
   startKey: String
   id: ID
   personId: ID    
}

input CreateAddressInput {
   personId: ID!
   street: String!
   city: String!
   state: String!
   zip: String!
}

input UpdateAddressInput {
   id: ID!
   personId: ID!
   street: String!
   city: String!
   state: String!
   zip: String!
}
type PaginatedPerson {
    limit: Int!
    lastKey: String
    items: [Person!]!
}

input GetPersonInput {
   id: ID!
}

input DeletePersonInput {
   id: ID!
}

input QueryPersonRecordsInput {
   limit: Int
   startKey: String
   id: ID    
}

input CreatePersonInput {
   firstName: String!
   lastName: String!
   age: Int
}

input UpdatePersonInput {
   id: ID!
   firstName: String!
   lastName: String!
   age: Int
}

type Query {

    getAddress (input: GetAddressInput!) : Address!
    queryAddressRecords (input: QueryAddressRecordsInput!): PaginatedAddress!
    getPerson (input: GetPersonInput!) : Person!
    queryPersonRecords (input: QueryPersonRecordsInput!): PaginatedPerson!
}

type Mutation {

    createAddress (input: CreateAddressInput!) : Address!
    updateAddress (input: UpdateAddressInput!) : Address!
    deleteAddress (input: DeleteAddressInput!) : Address!
    createPerson (input: CreatePersonInput!) : Person!
    updatePerson (input: UpdatePersonInput!) : Person!
    deletePerson (input: DeletePersonInput!) : Person!
}