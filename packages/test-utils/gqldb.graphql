type Address @model(
    indexes: [{name: "ByState", index: "gsi1index", pk: "pk", sk: "gsi1"}]
) {
    pk: String! @key(key: "Address", type: "pk")
    sk: String! @key(key: "personId:{{personId}}|id:{{id}}", type: "sk")
    gsi1: String! @key(key: "state:{{state}}|city:{{city}}|id:{{id}}")
    id: ID! @uuid
    personId: ID!
    street: String!
    city: String!
    state: String!
    zip: String!
    person: Person! @belongsTo(pk: "Person", sk: "id:{{personId}}")
}

type Email {
    domain: String
    address: String
}

type Person @model {
    pk: String! @key(key: "Person", type: "pk")
    sk: String! @key(key: "id:{{id}}", type: "sk")
    id: ID! @uuid
    firstName: String!
    lastName: String!
    age: Int
    addresses: [Address!]! @hasMany(pk: "Address", sk: "personId:{{id}}")
    emails: [Email]
}

type Validation @model {
    pk: String! @key(key: "Validation", type: "pk")
    sk: String! @key(key: "id:{{id}}", type: "sk")
    id: ID! @uuid
    minLength: String! @constraint(minLength: 3)
    maxLength: String! @constraint(maxLength: 3)
    min: Int! @constraint(min: 3)
    max: Int! @constraint(max: 3)
    pattern: String! @constraint(pattern: "[a-z]*")
    startsWith: String! @constraint(startsWith: "a")
    endsWith: String! @constraint(endsWith: "a")
    contains: String! @constraint(contains: "a")
    notContains: String! @constraint(notContains: "a")
}