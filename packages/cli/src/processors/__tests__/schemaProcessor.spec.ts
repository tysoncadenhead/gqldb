import {ISchemaJson, KeyType} from '../../types';
import {schemaProcessor} from '../schemaProcessor';

describe('schemaProcessor', () => {
  it('should return the schema', () => {
    const expected = `#THIS IS A GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
type PaginatedPerson {
    limit: Int!
    lastKey: String
    items: [Person!]!
}
type Person {
   pk: String!
   sk: String!
   id: ID!
   firstName: String!
   lastName: String!
}
input GetPersonInput {
   id: ID!
}
input DeletePersonInput {
   id: ID!
}
input QueryPersonRecordsInput {
   limit: Int
   startKey: String
}
input CreatePersonInput {
   firstName: String!
   lastName: String!
}
input UpdatePersonInput {
   id: ID!
   firstName: String!
   lastName: String!
}
type Query {
    getPerson (input: GetPersonInput!) : Person!
    queryPersonRecords (input: QueryPersonRecordsInput!): PaginatedPerson!
}
type Mutation {
    createPerson (input: CreatePersonInput!) : Person!
    updatePerson (input: UpdatePersonInput!) : Person!
    deletePerson (input: DeletePersonInput!) : Person!
}`;

    const json: ISchemaJson = {
      Person: {
        directives: {
          model: {},
        },
        fields: {
          pk: {
            type: 'String',
            required: true,
            isArray: false,
            directives: {
              key: {
                key: 'Address',
                type: KeyType.pk,
              },
            },
          },
          sk: {
            type: 'String',
            required: true,
            isArray: false,
            directives: {
              key: {
                key: 'personId:{{personId}}|id:{{id}}',
                type: KeyType.sk,
              },
            },
          },
          id: {
            type: 'ID',
            required: true,
            isArray: false,
            directives: {
              uuid: {},
            },
          },
          firstName: {
            type: 'String',
            required: true,
            directives: {},
            isArray: false,
          },
          lastName: {
            type: 'String',
            required: true,
            directives: {},
            isArray: false,
          },
        },
      },
    };
    const result = schemaProcessor({
      json,
      prev: {},
      options: {generateApi: true},
    });
    expect(result).toEqual({
      schema: expected,
    });
  });

  it('should return the schema with an index', () => {
    const expected = `#THIS IS A GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
type PaginatedPerson {
    limit: Int!
    lastKey: String
    items: [Person!]!
}
type Person {
   pk: String!
   sk: String!
   gsi1: String!
   id: ID!
   firstName: String!
   lastName: String!
}
input GetPersonInput {
   id: ID!
}
input DeletePersonInput {
   id: ID!
}
input QueryPersonRecordsByFirstNameInput {
   limit: Int
   startKey: String
   id: ID
   firstName: String
}
input QueryPersonRecordsInput {
   limit: Int
   startKey: String
}
input CreatePersonInput {
   firstName: String!
   lastName: String!
}
input UpdatePersonInput {
   id: ID!
   firstName: String!
   lastName: String!
}
type Query {
    getPerson (input: GetPersonInput!) : Person!
    queryPersonRecords (input: QueryPersonRecordsInput!): PaginatedPerson!
   queryPersonRecordsByFirstName (input: QueryPersonRecordsByFirstNameInput!): PaginatedPerson!
}
type Mutation {
    createPerson (input: CreatePersonInput!) : Person!
    updatePerson (input: UpdatePersonInput!) : Person!
    deletePerson (input: DeletePersonInput!) : Person!
}`;

    const json: ISchemaJson = {
      Person: {
        directives: {
          model: {
            indexes: [
              {
                name: 'ByFirstName',
                pk: 'pk',
                sk: 'gsi1',
                index: 'gsi1index',
              },
            ],
          },
        },
        fields: {
          pk: {
            type: 'String',
            required: true,
            isArray: false,
            directives: {
              key: {
                key: 'Address',
                type: KeyType.pk,
              },
            },
          },
          sk: {
            type: 'String',
            required: true,
            isArray: false,
            directives: {
              key: {
                key: 'personId:{{personId}}|id:{{id}}',
                type: KeyType.sk,
              },
            },
          },
          gsi1: {
            type: 'String',
            required: true,
            isArray: false,
            directives: {
              key: {
                key: 'firstName:{{firstName}}|id:{{id}}',
              },
            },
          },
          id: {
            type: 'ID',
            required: true,
            isArray: false,
            directives: {
              uuid: {},
            },
          },
          firstName: {
            type: 'String',
            required: true,
            directives: {},
            isArray: false,
          },
          lastName: {
            type: 'String',
            required: true,
            directives: {},
            isArray: false,
          },
        },
      },
    };
    const result = schemaProcessor({
      json,
      prev: {},
      options: {generateApi: true},
    });
    expect(result).toEqual({
      schema: expected,
    });
  });
});
