directive @model(table: String, indexes: [GQLDBIndex]) on OBJECT

directive @pk(key: String!) on FIELD_DEFINITION

directive @sk(key: String!) on FIELD_DEFINITION

directive @key(key: String!) on FIELD_DEFINITION

directive @belongsTo(pk: String!, sk: String!) on FIELD_DEFINITION

directive @hasOne(pk: String!, sk: String!) on FIELD_DEFINITION

directive @hasMany(pk: String!, sk: String!) on FIELD_DEFINITION

directive @generated on FIELD_DEFINITION

input GQLDBIndex {
  name: String!
  index: String!
  pk: String!
  sk: String!
}

type Address {
  pk: String!
  sk: String!
  gsi1: String!
  id: ID!
  personId: ID!
  street: String!
  city: String!
  state: String!
  zip: String!
  person: Person!
}

type Email {
  domain: String
  address: String
}

type Person {
  pk: String!
  sk: String!
  id: ID!
  firstName: String!
  lastName: String!
  age: Int
  addresses: [Address!]!
  emails: [Email]
}

input EmailInput {
  domain: String
  address: String
}

type PaginatedAddress {
  limit: Int!
  lastKey: String
  items: [Address!]!
}

input GetAddressInput {
  id: ID!
  personId: ID!
}

input DeleteAddressInput {
  id: ID!
  personId: ID!
}

input QueryAddressRecordsByStateInput {
  limit: Int
  startKey: String
  id: ID
  city: String
  state: String
}

input QueryAddressRecordsInput {
  limit: Int
  startKey: String
  id: ID
  personId: ID
}

input CreateAddressInput {
  personId: ID!
  street: String!
  city: String!
  state: String!
  zip: String!
}

input UpdateAddressInput {
  id: ID!
  personId: ID!
  street: String!
  city: String!
  state: String!
  zip: String!
}

type PaginatedPerson {
  limit: Int!
  lastKey: String
  items: [Person!]!
}

input GetPersonInput {
  id: ID!
}

input DeletePersonInput {
  id: ID!
}

input QueryPersonRecordsInput {
  limit: Int
  startKey: String
  id: ID
}

input CreatePersonInput {
  firstName: String!
  lastName: String!
  age: Int
  emails: [EmailInput]
}

input UpdatePersonInput {
  id: ID!
  firstName: String!
  lastName: String!
  age: Int
  emails: [EmailInput]
}

type Query {
  getAddress(input: GetAddressInput!): Address!
  queryAddressRecords(input: QueryAddressRecordsInput!): PaginatedAddress!
  queryAddressRecordsByState(input: QueryAddressRecordsByStateInput!): PaginatedAddress!
  getPerson(input: GetPersonInput!): Person!
  queryPersonRecords(input: QueryPersonRecordsInput!): PaginatedPerson!
}

type Mutation {
  createAddress(input: CreateAddressInput!): Address!
  updateAddress(input: UpdateAddressInput!): Address!
  deleteAddress(input: DeleteAddressInput!): Address!
  createPerson(input: CreatePersonInput!): Person!
  updatePerson(input: UpdatePersonInput!): Person!
  deletePerson(input: DeletePersonInput!): Person!
}